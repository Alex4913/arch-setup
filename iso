#!/bin/bash
# iso
# aoneill - 03/09/15

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SETUP="$DIR/setup"

BUILD_DIR="$DIR/build"
CACHE_DIR="$DIR/cache"
CACHE_DB="cached.db.tar.gz"
TEST_DIR="$DIR/test"
DATA_DIR="$DIR/data"
ARCHISO_BUILD_DIR="$BUILD_DIR/archiso"
DIST_DIR="$ARCHISO_BUILD_DIR/airootfs/root/arch-setup"

function args() {
  export CACHING=1
  export CLEAN_BUILD=0
  export VANILLA=0
  export QUIET=0
  export DRY_RUN=0

  while [[ ${1:0:1} == - ]]; do
    term="$1"
    case "$term" in
      -c|--no-caching)
        export CACHING=0
        ;;

      -b|--clean-build)
        export CLEAN_BUILD=1
        ;;

      -l|--vanilla)
        export VANILLA=1
        ;;

      -q|--quiet)
        export QUIET=1
        ;;

      -d|--dry-run)
        export DRY_RUN=1
        ;;
    esac

    shift 1
  done
}

function vanilla() {
  section vanilla

  # Check that we have what we need
  which curl md5sum wget 2>&1 >/dev/null
  if [[ "$?" == "1" ]]; then
    echo "error: \`curl', \`md5sum' or \`wget' not installed! Will not continue"
    return 1
  fi

  # A reliable mirror
  url="http://mirror.rackspace.com/archlinux/iso/latest/"
  sums="$url/md5sums.txt"

  # Get the latest version
  version="$(curl "$url" 2>/dev/null \
             | grep ".iso\"" \
             | sed -e "s/.*href=\"\(.*\)\".*/\1/g")"

  # Check if one exists, and if it matches the md5 sum, do nothing
  [[ -f "$version" ]] && \
    md5sum "$version" | grep -qFf <(curl "$sums" 2>/dev/null) && \
    return 0

  # Grab it!
  tell rm -f "${version}"
  tell wget "${url}${version}" -O "${version}"
}

function setup() {
  section setup

  # Remove the ArchISO build area if it exists (tough to recreate)
  if [[ -d "$ARCHISO_BUILD_DIR" ]]; then
    tell rm -rf "$ARCHISO_BUILD_DIR"
  fi

  tell mkdir -p "$BUILD_DIR"
  tell mkdir -p "$ARCHISO_BUILD_DIR"
  tell mkdir -p "$CACHE_DIR"
}

function archiso() {
  section archiso

  # Distribute Arch ISO materials
  tell cp -r "/usr/share/archiso/configs/releng/*" "$ARCHISO_BUILD_DIR/"

  # Copy this repo into the filesystem
  tell mkdir -p "$DIST_DIR"

  tell_eval "find '$DIR' -maxdepth 1  "\
    "-not -name '$(basename "$BUILD_DIR")' " \
    "-not -name '$(basename "$CACHE_DIR")' " \
    "-not -name '$(basename "$TEST_DIR")' " \
    "-not -name '$(basename "$DATA_DIR")' " \
    "-not -name '*.iso' " \
    "-not -path '*.git*' " \
    "-not -name '$(basename "$0")' " \
    " | tail -n+2 | xargs cp -rt '$DIST_DIR'"

  # Remove i686 support
  tell sed -i -e "s/i686//g" "$ARCHISO_BUILD_DIR/build.sh"
}

function airootfs() {
  section airootfs

  dist="$(echo "$DIST_DIR" | sed -e "s|^.*airootfs/root/||g")"
  tell_eval "cat <(echo 'DIST_DIR=$dist') '$ISO_SUPPORT/airootfs/setup.sh' " \
    ">> '$ARCHISO_BUILD_DIR/airootfs/root/setup.sh'"

  # Copy the Pacman configuration
  tell cp "$ISO_SUPPORT/pacman.conf" "$ARCHISO_BUILD_DIR/airootfs/etc/pacman.conf"

  # Add our customization options
  tell_eval "cat '$ISO_SUPPORT/customize_airootfs.sh' " \
    ">> '$ARCHISO_BUILD_DIR/airootfs/root/customize_airootfs.sh'"
}

function packages() {
  section packages

  # Cache official packages
  if (( CACHING )); then
    echo "Caching packages for pacman..."
    tell pacman --noconfirm -Sy

    dir="$PACKAGES/pacman"
    packs="$(mktemp)"
    for file in $(find $dir -maxdepth 1 -type f | sort); do
      # Get both the dependencies and the packages
      cat "$file" | xargs -L 1 -- pactree -u >> "$packs"
    done

    # Install
    tell pacman --noconfirm -Sw --cachedir "$CACHE_DIR" \
      $(sort "$packs" | uniq)

    # Cache community packages
    echo "Caching packages for pacaur..."
    dir="$PACKAGES/pacaur"
    aur_packs="$(mktemp)"
    for file in $(find $dir -maxdepth 1 -type f | sort); do
      # Get both the dependencies and the packages
      cat "$file" >> "$aur_packs"
    done

    tell pacaur --aur --noconfirm -Syw --cachedir "$CACHE_DIR" \
      $(sort "$aur_packs" | uniq)

    # Copy over the cached packages
    cache="$ARCHISO_BUILD_DIR/airootfs/root/package_cache"
    tell mkdir -p "$cache"
    tell cp -v "$CACHE_DIR/*" "$cache/"

    # Create a local database
    tell repo-add "$cache/$CACHE_DB" "$cache/*"

    # Copy over package cache name to setup script
    tmp="$(mktemp)"
    tell_eval "cat <(echo 'PACK_CACHE=$(basename $CACHE_DIR)') " \
      "'$ARCHISO_BUILD_DIR/airootfs/root/setup.sh' " \
      "> '$tmp'"
    tell mv "$tmp" "$ARCHISO_BUILD_DIR/airootfs/root/setup.sh"
  fi
}

function build() {
  section build

  # Build the ISO
  mkdir "$ARCHISO_BUILD_DIR/out"

  cd "$ARCHISO_BUILD_DIR"
  tell ./build.sh -v
  cd "$DIR"

  # Copy it here and fix permissions
  user="$(whoami)"
  [ "$SUDO_USER" ] && user="$SUDO_USER"

  tell chown $user "$ARCHISO_BUILD_DIR/out/*.iso"
  tell mv "$ARCHISO_BUILD_DIR/out/*.iso" "$DIR"

  # Optionally wipe the build directory (cache included)
  (( CLEAN_BUILD )) && tell rm -rf "$BUILD_DIR"
}

function notify() {
  # Make sure a notification system is present
  command -v notify-send 2>&1 >/dev/null || return 1

  [[ -n "$SUDO_USER" ]] && su $SUDO_USER -c \
    'notify-send "Arch ISO" "Custom Arch ISO build complete" '`
    `'--icon=utilities-terminal'
  [[ -z "$SUDO_USER" ]] && \
    notify-send 'Arch ISO' 'Custom Arch ISO build complete' \
      --icon=utilities-terminal
}

function init() {
  # Populate variables
  local _args="$@"
  args $@ || return 1
  shift $#

  # Get various tools
  source "$SETUP/setup.sh"

  if (( VANILLA )); then
    vanilla
    return $?
  fi

  # Need root-level permissions
  if [[ "$(whoami)" != "root" ]]; then
    # Run as root if available
    if which sudo &>/dev/null; then
      always tell sudo $0 $_args
      return $?
    fi

    echo "Need root-level access. Run as root!"
    return 1
  fi

  CUSTOMIZE_PATH="$ISO_SUPPORT/airootfs/setup.sh"

  if ! [[ -d "/usr/share/archiso" ]]; then
    echo "error: \`archiso' not installed! Will not continue"
    return 1
  fi

  which pacman pacaur 2>&1 >/dev/null
  if [[ "$?" == "1" ]]; then
    echo "error: \`pacman' or \`pacaur' not installed! Will not continue"
    return 1
  fi

  setup

  # Infrastructure
  archiso
  airootfs
  packages

  build

  # Notify of completion
  notify
}

# Run init only when run
EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && init $@
