#!/bin/bash
# iso
# aoneill - 03/09/15

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SETUP="$DIR/setup"

BUILD_DIR="$DIR/build"
CACHE_DIR="$DIR/cache"
CACHE_DB="cached.db.tar.gz"
ARCHISO_BUILD_DIR="$BUILD_DIR/archiso"
DIST_DIR="$ARCHISO_BUILD_DIR/airootfs/root/arch-setup"

function args() {
  export CACHING=1
  export CLEAN_BUILD=0
  export VANILLA=0
  export QUIET=0
  export DRY_RUN=0

  while [[ ${1:0:1} == - ]]; do
    term="$1"
    case "$term" in
      -c|--no-caching)
        export CACHING=0
        ;;

      -b|--clean-build)
        export CLEAN_BUILD=1
        ;;

      -l|--vanilla)
        export VANILLA=1
        ;;

      -q|--quiet)
        export QUIET=1
        ;;

      -d|--dry-run)
        export DRY_RUN=1
        ;;
    esac

    shift 1
  done
}

function vanilla() {
  section vanilla

  # Check that we have what we need
  which curl md5sum wget 2>&1 >/dev/null
  if [[ "$?" == "1" ]]; then
    echo "error: \`curl', \`md5sum' or \`wget' not installed! Will not continue"
    return 1
  fi

  # A reliable mirror
  url="http://mirror.rackspace.com/archlinux/iso/latest/"
  sums="$url/md5sums.txt"

  # Get the latest version
  version="$(curl "$url" 2>/dev/null \
             | grep ".iso\"" \
             | sed -e "s/.*href=\"\(.*\)\".*/\1/g")"

  # Check if one exists, and if it matches the md5 sum, do nothing
  [[ -f "$version" ]] && \
    md5sum "$version" | grep -qFf <(curl "$sums" 2>/dev/null) && \
    return 0

  # Grab it!
  tell rm -f "${version}"
  tell wget "${url}${version}" -O "${version}"
}

function setup() {
  section setup

  # Remove the ArchISO build area if it exists (tough to recreate)
  if [[ -d "$ARCHISO_BUILD_DIR" ]]; then
    tell rm -rf "$ARCHISO_BUILD_DIR"
  fi

  tell mkdir -p "$BUILD_DIR"
  tell mkdir -p "$ARCHISO_BUILD_DIR"
  tell mkdir -p "$CACHE_DIR"
}

function archiso() {
  section archiso

  # Distribute Arch ISO materials
  tell cp -r "/usr/share/archiso/configs/releng/*" "$ARCHISO_BUILD_DIR/"

  # Copy this repo into the filesystem
  tell mkdir -p "$DIST_DIR"

  tell_eval "find . -maxdepth 1  "\
    "-not -name '$(basename "$BUILD_DIR")' " \
    "-not -name '$(basename "$CACHE_DIR")' " \
    "-not -name '*.iso' " \
    "-not -path '*.git*' " \
    "-not -name '$(basename "$0")' " \
    "-not -path . " \
    "| xargs cp -rt '$DIST_DIR'"
}

function airootfs() {
  section airootfs

  dist="$(echo "$DIST_DIR" | sed -e "s|^.*airootfs/root/||g")"
  tell_eval "cat <(echo 'DIST_DIR=$dist') '$ISO_SUPPORT/airootfs/setup.sh' " \
    ">> '$ARCHISO_BUILD_DIR/airootfs/root/setup.sh'"

  # Copy the Pacman configuration
  tell cp "$ISO_SUPPORT/pacman.conf" "$ARCHISO_BUILD_DIR/airootfs/etc/pacman.conf"
}

function packages() {
  section packages

  # Cache official packages
  if (( CACHING )); then
    echo "Caching packages for pacman..."
    tell pacman --noconfirm -Sy

    dir="$PACKAGES/pacman"
    for file in $(find $dir -maxdepth 1 -type f | sort); do
      # Get both the dependencies and the packages
      pkgs="$(expac -S '%E' -l ' ' $(cat "$file")) $(cat "$file")"
      tell pacman --noconfirm -Sw --cachedir "$CACHE_DIR" $pkgs
    done

    # Cache community packages
    echo "Caching packages for pacaur..."
    dir="$PACKAGES/pacaur"
    for file in $(find $dir -maxdepth 1 -type f | sort); do
      tell pacaur --aur --noconfirm -Syw --cachedir "$CACHE_DIR" $(cat "$file")
    done

    # Copy over the cached packages
    cache="$ARCHISO_BUILD_DIR/airootfs/root/package_cache"
    tell mkdir -p "$cache"
    tell cp -v "$CACHE_DIR/*" "$cache/"

    # Create a local database
    tell repo-add "$cache/$CACHE_DB" "$cache/*"

    # Copy standard databases
    arch='x86_64'
    mirror='https://mirrors.kernel.org/archlinux/'
    dest="$ARCHISO_BUILD_DIR/airootfs/root/dbs/"

    tell mkdir -p "$dest"
    tell wget -P "$dest" "$mirror/community/os/$arch/community.db"
    tell wget -P "$dest" "$mirror/core/os/$arch/core.db"
    tell wget -P "$dest" "$mirror/extra/os/$arch/extra.db"
    tell wget -P "$dest" "$mirror/multilib/os/$arch/multilib.db"
  fi
}

function build() {
  section build

  # Build the ISO
  mkdir "$ARCHISO_BUILD_DIR/out"

  cd "$ARCHISO_BUILD_DIR"
  tell ./build.sh -v
  cd "$DIR"

  # Copy it here and fix permissions
  user="$(whoami)"
  [ "$SUDO_USER" ] && user="$SUDO_USER"

  tell chown $user "$ARCHISO_BUILD_DIR/out/*.iso"
  tell mv "$ARCHISO_BUILD_DIR/out/*.iso" "$DIR"

  # Optionally wipe the build directory (cache included)
  (( CLEAN_BUILD )) && tell rm -rf "$BUILD_DIR"
}

function init() {
  # Populate variables
  local _args="$@"
  args $@ || return 1
  shift $#

  # Get various tools
  source "$SETUP/setup.sh"

  if (( VANILLA )); then
    vanilla
    return $?
  fi

  # Need root-level permissions
  if [[ "$(whoami)" != "root" ]]; then
    # Run as root if available
    if which sudo &>/dev/null; then
      always tell sudo $0 $_args
      return $?
    fi

    echo "Need root-level access. Run as root!"
    return 1
  fi

  CUSTOMIZE_PATH="$ISO_SUPPORT/airootfs/setup.sh"

  if ! [[ -d "/usr/share/archiso" ]]; then
    echo "error: \`archiso' not installed! Will not continue"
    return 1
  fi

  which pacman pacaur 2>&1 >/dev/null
  if [[ "$?" == "1" ]]; then
    echo "error: \`pacman' or \`pacaur' not installed! Will not continue"
    return 1
  fi

  setup

  archiso
  airootfs
  packages

  build
}

# Run init only when run
EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && init $@
