#!/bin/bash
# 30-packages
# aoneill - 02/19/16

PRE_DIR="$CWD/pre-setup"
GLOBALS="$PRE_DIR/globals"

source "$GLOBALS"

# Use utilities here
source $PRE_DIR/*-passwords

# Patch makepkg to run as root (will be reverted later)
function makepkg-patch() {
  patch /usr/bin/makepkg < "$RESOURCES/makepkg-patch.diff"
} 

# Temporary method to pull packages from AUR (to install yaourt)
function aurShim() {
  pkg="$1"
  cwd=$(pwd)
  
  filename="${pkg}.tar.gz"
  echo "Installing $pkg from AUR..."

  # Get package
  tmp="$(mktemp -d)"
  cd "$tmp"
  wget "https://aur.archlinux.org/cgit/aur.git/snapshot/$filename"
  tar xf "$filename"
  cd "$pkg"

  # Make contents and install
  chmod -R 777 $tmp
  makepkg --noconfirm -sri

  cd "$cwd"
  rm -rf $tmp
}

# Install all the packages needed
function init() {
  section Packages

  # Setup pacman for 32-bit libs 
  echo "
[multilib]
Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf
  pacman -Sy

  # Install standard packages
  dir="$RESOURCES/pacman"
  for file in $(find $dir -maxdepth 1 -type f | sort)
  do
    section "Packages -- pacman / $file"
    pacman --noconfirm -S $(cat "$file")
  done

  # Install needed packages to use yaourt
  makepkg-patch
  aurShim package-query
  aurShim yaourt
  
  # Installing community packages
  echo "Installing packages for yaourt..."
  dir="$RESOURCES/yaourt"
  for file in $(find $dir -maxdepth 1 -type f | sort)
  do
    section "Packages -- yaourt / $file"
    yaourt --noconfirm -S $(cat "$file")
  done

  # Revert changes to makepkg
  pacman --noconfirm -S pacman
}

# Execute init (passing arguments) if we are not sourced
EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && init $@
