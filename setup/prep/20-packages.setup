#!/bin/bash
# 20-packages.setup
# aoneill - 07/28/16

# Location of this script
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Section name
_NAME="$(basename "$0" | sed -e "s/^[0-9]\+-\([a-zA-Z0-9_-]\+\)\..*$/\1/")"
SECTION="$(basename "$DIR") :: $_NAME"

# General initialization
function init() {
  # Source the driver
  source "$DIR/$(basename "$DIR").sh"

  CONFIG_DIR="$DIR/$(pack_folder "$0")"
}

# Enable multilib for pacman
function pacmanMultilib() {
  config="/etc/pacman.conf"
  if [[ -z "$(grep -A 1 "^[multilib]" "$config" | grep "^Include=")" ]]; then
    tell_eval "echo '[multilib]' >> '$config'"
    tell_eval "echo 'Include = /etc/pacman.d/mirrorlist' >> '$config'"
  fi
}

# Patch makepkg to run as root (will be reverted later)
function makepkgPatch() {
  tell patch /usr/bin/makepkg < "$CONFIG_DIR/makepkg-patch.diff"
}

# Temporary method to pull packages from AUR (to install pacaur)
function aurShim() {
  pkg="$1"
  cwd=$(pwd)

  filename="${pkg}.tar.gz"
  echo "Installing $pkg from AUR..."

  # Get package
  tmp="$(temp -d)"
  tell cd "$tmp"
  tell wget "https://aur.archlinux.org/cgit/aur.git/snapshot/$filename"
  tell tar xf "$filename"
  tell cd "$pkg"

  # Make contents and install
  tell chmod -R 777 $tmp
  tell makepkg --noconfirm -sri

  cd "$cwd"
  rm -rf $tmp
}

function installAllWithManager() {
  manager="$@"

  dir="$PACKAGES/${manager%% *}"
  for file in $(find $dir -maxdepth 1 -type f | sort)
  do
    # Filter packages that already exist
    tmp="$(temp)"
    pacman -Qi $(cat "$file") 2>&1 >/dev/null \
      | grep "error: package .* was not found" \
      | sed -e "s/^error: package '\([a-zA-Z0-9_-]\+\)' was not found$/\1/" \
      > "$tmp"

    # Check for groups if stuff was missed
    final="$(temp)"
    if [[ "$(cat "$tmp")" ]]; then
      # See if the missed packages were actually groups
      pacman -Qg $(cat "$tmp") 2>&1 >/dev/null \
        | grep "error: group .* was not found" \
        | sed -e "s/^error: group '\([a-zA-Z0-9_-]\+\)' was not found$/\1/" \
        > "$final"
    else
      mv "$tmp" "$final"
    fi

    # Install necessary
    if [[ "$(wc -l "$final" | sed -e "s/^\([0-9]\+\) .*$/\1/")" -gt 0 ]]; then
      # Display the major section if needed
      section "$SECTION"

      minor_section "Packages -- $manager / $(basename $file)"
      tell $manager --noconfirm -S $(cat "$final")
    fi
  done
}

# Preform an update
function update() {
  init

  # Install standard packages
  installAllWithManager pacman

  # Install pacaur packages
  installAllWithManager pacaur --aur

  # Notify if nothing happened
  skipped "$SECTION"
}

# Install all the packages needed
function install() {
  init

  # Add multilib support
  pacmanMultilib

  # Install standard packages
  installAllWithManager pacman

  # Install needed packages to use pacaur
  minor_section "Packages -- pacaur / Setup"
  makepkgPatch
  aurShim pacaur

  # Install pacaur packages
  installAllWithManager pacaur --aur

  # Revert changes to makepkg
  minor_section "Packages -- Cleanup"
  tell pacman --noconfirm -S pacman
}

# Execute $MODE (passing arguments) if we are not sourced
EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && $MODE $@
