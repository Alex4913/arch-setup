#!/bin/bash
# 10-passwords
# aoneill - 02/19/16

# Source the driver
source "$(basename "$(pwd)").sh"

function init() {
  section Passwords

  echo -e "\
WARNING: This section is sensitive! I will ask you for various passwords,
  and show them to you as you type. This so that you can verify the passwords
  you supply for correctness, as they will be used later to configure your
  system.

Make sure no one is watching!\n"

  _pw_record_only_pass "root" "Root user" "this machine"
  _pw_record "Arch Linux" "this machine"
  _pw_record "Github" "@github.com"
  _pw_record "Andrew" "@andrew.cmu.edu"
} 

function _pw_record() {
  prog=$1
  extra=$2
  if [[ $extra != "" ]]
  then
    extra=" ($extra)"
  fi

  echo -n "Username for ${prog}${extra}: "
  read user
  echo -n "Password: "
  read password
  
  echo "$(echo $prog | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')" \
    >> $PASSWD_FILE
  echo "$user" >> $PASSWD_FILE
  echo "$password" >> $PASSWD_FILE
}

function _pw_record_only_pass() {
  user=$1
  prog=$2
  extra=$3
  if [[ $extra != "" ]]
  then
    extra=" ($extra)"
  fi

  echo -n "Password for ${prog}${extra}: "
  read password
  
  echo "$(echo $prog | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')" \
    >> $PASSWD_FILE
  echo "$user" >> $PASSWD_FILE
  echo "$password" >> $PASSWD_FILE
}

function pw_lock() {
  echo -n "Password to protect password file: "
  read -s password

  tmp=$(mktemp)
  openssl aes-256-cbc -salt -in $PASSWD_FILE -out $tmp -pass "pass:$password"
  mv $tmp $PASSWD_FILE
}

function pw_unlock() {
  echo "Locking password file..."
  echo -n "Password for password file: "
  read -s password

  tmp=$(mktemp)
  openssl aes-256-cbc -salt -in $PASSWD_FILE -out $tmp -d -pass "pass:$password"
  mv $tmp $PASSWD_FILE
}

function pw_lookup() {
  prog="$(echo $1 | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')"
  tmp=$(mktemp)

  cat $PASSWD_FILE | grep -A 3 "$prog" > $tmp
  user=$(cat $tmp | sed -e '2q;d')
  passwd=$(cat $tmp | sed -e '3q;d')

  echo -ne "$user\n$passwd"
  rm $tmp
}

function pw_screwup() {
  prog="$(echo $1 | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')"
  
  tmp=$(mktemp)
  pw_lookup $prog | tee $tmp >/dev/null

  user=$(cat $tmp | sed -e '1q;d')
  passwd=$(cat $tmp | sed -e '2q;d')

  echo "\
ERROR: You gave me incorrect credentials for $1!
You gave me ($user, $passwd) earlier.
Please give me the correct combination:"
  
  cat $PASSWD_FILE | sed -e "/^$prog/,+3d" > $tmp
  mv $tmp $PASSWD_FILE

  _pw_record $prog
}

EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && init $@
