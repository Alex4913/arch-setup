#!/bin/bash
# 30-passwords.setup
# aoneill - 07/28/16

# Location of this script
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Section name
_NAME="$(basename "$0" | sed -e "s/^[0-9]\+-\([a-zA-Z0-9_-]\+\)\..*$/\1/")"
SECTION="$(basename "$DIR") :: $_NAME"

SECRET="LhJEMVTxQdJ6t9aezFewGqK9"

# This section does not need to do any updating
function update() {
  init

  # Notify if nothing happened
  skipped "$SECTION"
}

function init() {
  # Source the driver
  source "$DIR/$(basename "$DIR").sh"
}

# Hidden method to actually record a password
function _pw_record() {
  prog=$1
  extra=$2
  if [[ $extra != "" ]]
  then
    extra=" ($extra)"
  fi

  echo -n "Username for ${prog}${extra}: "
  read user
  echo -n "Password: "
  read password

  # Put a special identifier at the top
  ! [[ -f "$PASSWD_FILE" ]] && echo "$SECRET" >> "$PASSWD_FILE"

  echo "$(echo $prog | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')" \
    >> $PASSWD_FILE
  echo "$user" >> $PASSWD_FILE
  echo "$password" >> $PASSWD_FILE
}

# Hidden method to record a password for a known username
function _pw_record_only_pass() {
  user=$1
  prog=$2
  extra=$3
  if [[ $extra != "" ]]
  then
    extra=" ($extra)"
  fi

  echo -n "Password for ${prog}${extra}: "
  read password

  # Put a special identifier at the top
  ! [[ -f "$PASSWD_FILE" ]] && echo "$SECRET" >> "$PASSWD_FILE"

  echo "$(echo $prog | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')" \
    >> $PASSWD_FILE
  echo "$user" >> $PASSWD_FILE
  echo "$password" >> $PASSWD_FILE
}

function install() {
  init
  section "$SECTION"

  echo -e "\
WARNING: This section is sensitive! I will ask you for various passwords,
  and show them to you as you type. This so that you can verify the passwords
  you supply for correctness, as they will be used later to configure your
  system.

Make sure no one is watching!\n"

  _pw_record_only_pass "root" "Root user" "this machine"
  _pw_record "Arch Linux" "this machine"
  _pw_record "Github" "@github.com"
  _pw_record "Andrew" "@andrew.cmu.edu"
}

# See if the password file is locked
function pw_locked() {
  # Not locked if it doesn't exist
  ! [[ -f "$PASSWD_FILE" ]] && return 1

  # Not locked if the secret is found verbatim
  # This has a *very* low chance of failing
  head -n 1 "$PASSWD_FILE" | grep "$SECRET" &>/dev/null &&
    return 1

  return 0
}

# Lock the password file (from prying eyes!)
function pw_lock() {
  pw_locked && return 0

  password=
  while ! [[ "$password" ]]; do
    echo -n "Password to protect password file: "
    read -s password
    echo
  done

  tmp=$(temp)
  openssl aes-256-cbc -salt -in $PASSWD_FILE  \
                             -out $tmp -pass "pass:$password" \
    2>/dev/null
  [[ "$?" != 0 ]] && return 1

  mv $tmp $PASSWD_FILE
}

# Unlock the password file
function pw_unlock() {
  pw_locked || return 0

  ! [[ -f "$PASSWD_FILE" ]] && return

  echo "Unlocking password file..."
  echo -n "Password for password file: "
  read -s password
  echo

  tmp=$(temp)
  openssl aes-256-cbc -salt -in $PASSWD_FILE \
                            -out $tmp -d -pass "pass:$password" \
    2>/dev/null
  [[ "$?" != 0 ]] && return 1

  mv $tmp $PASSWD_FILE
}

# Lookup a password given some identifier
function pw_lookup() {
  # Make sure we can read the proper content of the PASWD_FILE
  pw_unlock

  prog="$(echo $1 | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')"
  tmp=$(temp)

  cat $PASSWD_FILE | grep -A 3 "$prog" > $tmp
  user=$(cat $tmp | sed -e '2q;d')
  passwd=$(cat $tmp | sed -e '3q;d')

  echo -ne "$user\n$passwd"
  rm $tmp
}

# Helper function to re-record a bad password
function pw_screwup() {
  prog="$(echo $1 | sed -e 's/ //g' | tr '[:upper:]' '[:lower:]')"

  tmp=$(temp)
  pw_lookup $prog | tee $tmp >/dev/null

  user=$(cat $tmp | sed -e '1q;d')
  passwd=$(cat $tmp | sed -e '2q;d')

  echo "\
ERROR: You gave me incorrect credentials for $1!
You gave me ($user, $passwd) earlier.
Please give me the correct combination:"

  cat $PASSWD_FILE | sed -e "/^$prog/,+3d" > $tmp
  mv $tmp $PASSWD_FILE

  _pw_record $prog
}

# Execute $MODE (passing arguments) if we are not sourced
EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && $MODE $@
