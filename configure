#!/bin/bash
# configure
# aoneill - 09/25/15

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

function usage() {
  cat << EOF
usage: $0 [OPTION]

Alex O'Neill's Arch Customizer

Options:
  -q, --quiet    Run without any status messages or explanation.
  -d, --dry-run  Only display proposed changes, do not change anything.
  -u, --update   Run in an "update-only" mode, where it is assumed that
                 previously an install was preformed.
EOF
}

function args() {
  export QUIET=0
  export DRY_RUN=0
  export MODE="install"

  local _args="$@"
  while [[ ${1:0:1} == - ]]; do
    term="$1"
    case "$term" in
      -q|--quiet)
        export QUIET=1
        ;;

      -d|--dry-run)
        export DRY_RUN=1
        ;;

      -u|--update)
        export MODE="update"
        ;;

      *)
        usage $_args
        return 1
        ;;
    esac

    shift 1
  done
}

# Function run at the end
CLEAN=0
function trapped() {
  ! (( CLEAN )) && echo -e "\n"

  # Lock the password file
  source "$SETUP/setup.sh" "$SETUP_PREP" "all"
  pw_lock

  # Remove temporary files
  always tell_eval "rm -rf '$TEMP_PREFIX.*'"
}

function blurb() {
  section "Alex O'Neill's Arch Customizer"

  echo -e "\
This is intended to configure a vanilla installation of Arch Linux to be
as close to the working copy I run on my various computers. See the README
for more information!\n"
}

function init() {
  # Populate variables
  local _args="$@"
  args $@ || return
  shift $#

  # Get various tools
  SETUP="$DIR/setup"
  source "$SETUP/setup.sh"

  # Need root-level permissions
  if [[ "$(whoami)" != "root" ]]; then
    # Run as root if available
    if which sudo &>/dev/null; then
      always tell sudo $0 $_args
      return $?
    fi

    echo "Need root-level access. Run as root!"
    return 1
  fi

  # Trap cleanup commands at the end
  trap trapped EXIT

  # Unlock the password file
  source "$SETUP/setup.sh" "$SETUP_PREP" "all"
  if ! pw_unlock; then
    echo "error: Failed to unlock password file!"

    # Undo the trap
    trap - EXIT
    return 1
  fi

  # Update mode
  if [[ "$MODE" == "update" ]]; then
    # Run update on each section
    "$SETUP/setup.sh" $SETUP_PREP
    "$SETUP/setup.sh" $SETUP_PACK
    "$SETUP/setup.sh" $SETUP_POST

   # Any other mode
  else
    # See if we are in a chroot (installing from a key)
    if [ "$(stat -c %d:%i /)" != "$(stat -c %d:%i /proc/1/root/.)" ]
    then
      blurb
      echo "Currently configuring while booted from live media. Will skip"
      echo "program-specific installation. Run '$0' once booted into bare arch"
      echo "installation with root user to configure programs and"
      echo "environment fully.\n"
      pause

      "$SETUP/setup.sh" $SETUP_PREP

      echo "'reboot' and run '$0' from Arch install"
    else
      blurb
      echo "Currently configuring while truly booted into Arch. Skipping"
      echo "initial configuration, working on package-specific configuration."
      pause

      "$SETUP/setup.sh" $SETUP_PACK
      "$SETUP/setup.sh" $SETUP_POST

      echo "'reboot' to apply all changes"
    fi
  fi

  CLEAN=1
}

# Run init only when exec'd
EXEC=$(test "${BASH_SOURCE[0]}" != "${0}"; echo $?)
[[ "$EXEC" == "1" ]] && init $@
